{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {
    "nbgrader": {
     "grade": false,
     "grade_id": "19edd8",
     "locked": true,
     "schema_version": 3,
     "solution": false,
     "task": false
    }
   },
   "source": [
    "Before you turn this problem in, make sure everything runs as expected. First, **restart the kernel** (in the menubar, select Kernel$\\rightarrow$Restart) and then **run all cells** (in the menubar, select Cell$\\rightarrow$Run All).\n",
    "\n",
    "Make sure you fill in any place that says `YOUR CODE HERE` or \"YOUR ANSWER HERE\", as well as your name and collaborators below:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "nbgrader": {
     "grade": true,
     "grade_id": "cell-e7e779c9812636b7",
     "locked": false,
     "points": 0,
     "schema_version": 3,
     "solution": true,
     "task": false
    }
   },
   "outputs": [],
   "source": [
    "NAME = \"MUHAMMAD ABDURREHMAN ASIF\"\n",
    "COLLABORATORS = \"\""
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "nbgrader": {
     "grade": false,
     "grade_id": "cell-f3f7defeea63d511",
     "locked": true,
     "schema_version": 3,
     "solution": false,
     "task": false
    }
   },
   "source": [
    "---"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "nbgrader": {
     "grade": false,
     "grade_id": "cell-14e3f4bcbe37fc5b",
     "locked": true,
     "schema_version": 3,
     "solution": false,
     "task": false
    }
   },
   "source": [
    "# CS110 Fall 2020 - Assignment 3\n",
    "# Trie trees\n",
    "\n",
    "**Fell free to add more cells to the ones always provided in each question to expand your answers, as needed. Make sure to refer to the [CS110 course guide](https://drive.google.com/file/d/1NUeMvAiGGMjif8IgLZjvwvwwzjBEx9Q0/view?pli=1) on the grading guidelines, namely how many HC identifications and applications you are expected to include in each assignment.**\n",
    "\n",
    "Throughout the assignment, key **\"checklist items\"** you have to implement or answer are bolded, while *hints* and other interesting accompanying notes are written in italics to help you navigate the text.\n",
    "\n",
    "If you have any questions, do not hesitate to reach out to the TAs in the Slack channel \"#cs110-algo-f20\", or come to one of your instructors' OHs.\n",
    "\n",
    "### Submission Materials\n",
    "Your assignment submission needs to include the following resources:\n",
    "1. A PDF file must be the first resource and it will be created from the Jupyter notebook template provided in these instructions. Please make sure to use the same function names as the ones provided in the template. If your name is “Dumbledore”, your PDF should be named “Dumbledore.pdf”.\n",
    "2. Your second resource must be a single Python/Jupyter Notebook named “Dumbledore.ipynb”. You can also submit a zip file that includes your Jupyter notebook, but please make sure to name it “Dumbledore.zip” (if your name is Dumbledore!).\n",
    "\n",
    "## Question 0 [#responsibility]\n",
    "\n",
    "Take a screenshot of your CS110 dashboard on Forum where the following is visible:\n",
    "* your name.\n",
    "* your absences for the course have been set to excused up to the end of week 9 (inclusively).\n",
    "\n",
    "This will be evidence that you have submitted acceptable pre-class and make-up work\n",
    "for a CS110 session you may have missed. Check the specific CS110 make-up and\n",
    "pre-class policies in the syllabus of the course."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 366,
   "metadata": {
    "nbgrader": {
     "grade": true,
     "grade_id": "cell-5798297773c8b032",
     "locked": false,
     "points": 0,
     "schema_version": 3,
     "solution": true,
     "task": false
    }
   },
   "outputs": [],
   "source": [
    "#Import all libraries we may use\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "from copy import copy\n",
    "import statistics as st\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 371,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "/home/sage/OneDrive/Documents/CS110 PCW/assignment trie\n"
     ]
    }
   ],
   "source": [
    "cd C:\\\\Users\\\\abdur\\\\OneDrive\\\\Documents\\\\CS110 PCW\\\\assignment trie\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 372,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/jpeg": "\n",
      "text/plain": [
       "<IPython.core.display.Image object>"
      ]
     },
     "execution_count": 372,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from IPython.display import Image\n",
    "Image(filename=\"dashboard.JPG\")"
   ]
  },
  {
   "attachments": {
    "tries01.png": {
     "image/png": ""
    }
   },
   "cell_type": "markdown",
   "metadata": {
    "nbgrader": {
     "grade": false,
     "grade_id": "cell-b95721e867549681",
     "locked": true,
     "schema_version": 3,
     "solution": false,
     "task": false
    }
   },
   "source": [
    "## Overview\n",
    "\n",
    "Auto-completion functionalities are now ubiquitous in search engines, document editors, and messaging apps. How would you go about developing an algorithmic strategy to implement these computational solutions? In this assignment, you will learn about a new data structure and use it to build an auto-complete engine. Each question in the assignment guides you closer to that objective while encouraging you to contrast this novel data structure to the other ones we have discussed in class.\n",
    "\n",
    "A [trie tree](https://en.wikipedia.org/wiki/Trie), or a prefix tree, is a common data structure that stores a set of strings in a collection of nodes so that all strings with a common prefix are found in the same branch of the tree. Each node is associated with a letter, and as you traverse down the tree, you pick up more letters, eventually forming a word. Complete words are commonly found on the leaf nodes. However, some inner nodes can also mark full words.\n",
    "\n",
    "Let’s use an example diagram to illustrate several important features of tries:\n",
    "\n",
    "![tries01.png](attachment:tries01.png)\n",
    "\n",
    "- Nodes that mark valid words are marked in yellow. Notice that while all leaves are considered valid words, only some inner nodes contain valid words, while some remain only prefixes to valid words appearing down the branch.\n",
    "\n",
    "- The tree does not have to be balanced, and the height of different branches depends on its contents.\n",
    "\n",
    "- In our implementation, branches never merge to show common suffixes (for example, both ANT and ART end in T, but these nodes are kept separate in their respective branches). However, this is a common first line of memory optimization for tries.\n",
    "\n",
    "- The first node contains an empty string; it “holds the tree together.”\n",
    "\n",
    "Your task in this assignment will be to implement a functional trie tree. You will be able to insert words into a dictionary, lookup valid and invalid words, print your dictionary in alphabetical order, and suggest appropriate suffixes like an auto-complete bot.\n",
    "\n",
    "The assignment questions will guide you through these tasks one by one. To stay safe from breaking your own code, and to reinforce the idea of code versioning, under each new question first **copy your previous (working) code**, and only then **implement the new feature**. The code skeletons provided throughout will make this easier for you at the cost of repeating some large portions of code."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "nbgrader": {
     "grade": false,
     "grade_id": "cell-819415e8038f6a91",
     "locked": true,
     "schema_version": 3,
     "solution": false,
     "task": false
    }
   },
   "source": [
    "## Q1: Implement a trie tree [#PythonProgramming, #CodeReadability, #DataStructures]\n",
    "\n",
    "In this question, you will write Python code that can take a set/list/tuple of strings and insert them into a trie tree and lookup whether a specific word/string is present in the trie tree.\n",
    "\n",
    "### Q1a: Theoretical pondering\n",
    "\n",
    "Two main approaches to building trees, you might recall from class, are making separate Tree and Node classes, or only making a Node class. Which method do you think is a better fit for trie trees, and why? Justify your reasoning in around 100 words."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "nbgrader": {
     "grade": true,
     "grade_id": "cell-4e464655d6bebd29",
     "locked": false,
     "points": 0,
     "schema_version": 3,
     "solution": true,
     "task": false
    }
   },
   "source": [
    "There are benefits to both approaches. Simply creating a node class would maintain continuity in our codes. It would initialize the same as always and then continue on to have methods that are called on the nodes attributes itself. We could complicate the methods as we like.\n",
    "\n",
    "On the other hand, separating the classes can provide flexibility. The way we structure a trie means that after the root node, we can add all the possible keys as children.This in turn can help in calling methods beyond the empty root and then building our trie appropriately. For more complex methods, this added flexibility can help us in recursive calls as we can call these on the children beyond the root. Auxiliary methods can also be created to assist in appropriately targeting required problems. These aux functions can go to the leaves or the parents and the ability to call them on separate nodes or on a tree itself opens up greater functionality to work with prefixes or entire words."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "nbgrader": {
     "grade": false,
     "grade_id": "cell-4cf53874138c22a2",
     "locked": true,
     "schema_version": 3,
     "solution": false,
     "task": false
    }
   },
   "source": [
    "### Q1b: Practical implementation\n",
    "\n",
    "*However, as often happens in the life of a software engineer, the general structure of code has already been determined for you. (The reasons this commonly happens are beyond the scope of this assignment, but they could include someone having written tests for you in a [TDD environment](https://en.wikipedia.org/wiki/Test-driven_development) which have a specific structure, or the need to comply with an older codebase.)*\n",
    "\n",
    "Specifically, **implement a Node class**, which will store the information relevant to each of the trie nodes. It doesn’t have to include any methods, but you will likely find out several attributes that are necessary for a successful implementation.\n",
    "\n",
    "Alongside this **create a Trie class**, which will represent the tree as a whole. Upon its initiation, the Trie class will create the root Node of the trie.\n",
    "\n",
    "For the Trie class, write **insert()** and **lookup()** methods, which will insert a word into the trie tree and look it up, respectively. Use the code skeleton below and examine the specifications of its docstrings to guide you on the details of inputs and outputs to each method.\n",
    "\n",
    "Finally, make sure that the trie can be **initiated with a wordbank as an input**. This means that a user can create a trie and feed it an initial dictionary of words (e.g. trie = Trie(wordlist)), which will be automatically inserted into the trie upon its creation. Likely, this will mean that your __init__() has to make some calls to your insert().\n",
    "\n",
    "Several test cases have been provided for your convenience and these include some, but not all, possible edge cases. If the implementation is correct, your code will pass all the tests. In addition, create at least **three more tests** to demonstrate that your code is working correctly and justify why such test cases are appropriate.\n",
    "\n",
    "Use as many code cells on this as you deem necessary. The first cell with the docstrings is locked to prevent accidental deletion."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 347,
   "metadata": {
    "nbgrader": {
     "grade": false,
     "grade_id": "cell-4ff3cb687e6c8471",
     "locked": true,
     "schema_version": 3,
     "solution": false,
     "task": false
    }
   },
   "outputs": [],
   "source": [
    "class Node_Q1:\n",
    "    \"\"\"This class represents one node of a trie tree.\n",
    "    \n",
    "    Parameters\n",
    "    ----------\n",
    "    The parameters for the Node class are not predetermined.\n",
    "    However, you will likely need to create one or more of them.\n",
    "    \"\"\"\n",
    "\n",
    "    def __init__(self, char):\n",
    "        self.char = char # each character of the node\n",
    "        \n",
    "        self.isWord = False #the flag we will use to check whether a word has been completed or not\n",
    "        \n",
    "        self.children = [] #we start empty but we will add items to this to maintain continuity and completion of words\n",
    "        \n",
    "class Trie_Q1:\n",
    "    \"\"\"This class represents the entirety of a trie tree.\n",
    "    \n",
    "    Parameters\n",
    "    ----------\n",
    "    The parameters for Trie's __init__ are not predetermined.\n",
    "    However, you will likely need one or more of them.    \n",
    "    \n",
    "    Methods\n",
    "    -------\n",
    "    insert(self, word)\n",
    "        Inserts a word into the trie, creating nodes as required.\n",
    "    lookup(self, word)\n",
    "        Determines whether a given word is present in the trie.\n",
    "    \"\"\"\n",
    "    def __init__(self, word_list = None):\n",
    "        \"\"\"Creates the Trie instance, inserts initial words if provided.\n",
    "        \n",
    "        Parameters\n",
    "        ----------\n",
    "        word_list : list\n",
    "            List of strings to be inserted into the trie upon creation.\n",
    "        \"\"\"\n",
    "        # initialize root node of the tree and set it to a blank char\n",
    "        self.root = Node_Q1('') \n",
    "        \n",
    "        # insert words to the trie from assigned word list\n",
    "        for word in word_list:\n",
    "            self.insert(word)\n",
    "    \n",
    "    def insert(self, word):\n",
    "        \"\"\"Inserts a word into the trie, creating missing nodes on the go.\n",
    "        \n",
    "        Parameters\n",
    "        ----------\n",
    "        word : str\n",
    "            The word to be inserted into the trie.\n",
    "        \"\"\"\n",
    "        #begin at the root of the tree\n",
    "        start = self.root\n",
    "        \n",
    "        #assign index to items for later referencing\n",
    "        for i, char in enumerate(word):\n",
    "            \n",
    "            #comparator flag\n",
    "            finished = False\n",
    "            for node in start.children:\n",
    "                #lowercase so any type of input is accepted\n",
    "                if char.lower() == node.char:\n",
    "                    #move onto child\n",
    "                    start = node\n",
    "                    #the entire word is inserted and we finish the call\n",
    "                    finished = True\n",
    "                    break\n",
    "                    \n",
    "            #in case we have a new word, we must continue adding nodes\n",
    "            if not finished:\n",
    "                \n",
    "                #following the principle of initializing, we add the new characters into the nodes\n",
    "                new_node = Node_Q1(char.lower()) \n",
    "                start.children.append(new_node) \n",
    "                start = new_node\n",
    "            #we change the flag to completed once all the letters of a word have been added \n",
    "            # (-1 because the index starts at 0)\n",
    "            if i == len(word)-1:\n",
    "                start.isWord = True\n",
    "\n",
    "                \n",
    "                    \n",
    "        \n",
    "    def lookup(self, word):\n",
    "        \"\"\"Determines whether a given word is present in the trie.\n",
    "        \n",
    "        Parameters\n",
    "        ----------\n",
    "        word : str\n",
    "            The word to be looked-up in the trie.\n",
    "            \n",
    "        Returns\n",
    "        -------\n",
    "        bool\n",
    "            True if the word is present in trie; False otherwise.\n",
    "            \n",
    "        Notes\n",
    "        -----\n",
    "        Your trie should ignore whether a word is capitalized.\n",
    "        E.g. trie.insert('Prague') should lead to trie.lookup('prague') = True\n",
    "        \"\"\"\n",
    "        \n",
    "        #similar principle as insert, we start at the root\n",
    "        start = self.root\n",
    "        for i, char in enumerate(word):           \n",
    "            finished = False\n",
    "            for node in start.children:                  \n",
    "                if char.lower() == node.char:\n",
    "                    start = node\n",
    "                    finished = True\n",
    "                    break\n",
    "                \n",
    "            # this is where the code differs, instead of adding new nodes if the word is not present,\n",
    "            # we just return false because that is the function of this code.\n",
    "            if not finished: \n",
    "                return False\n",
    "        \n",
    "            # once the entire word has been found, the flag is changed and we can return True\n",
    "            if i == len(word) - 1:\n",
    "                return start.isWord\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 348,
   "metadata": {
    "nbgrader": {
     "grade": false,
     "grade_id": "cell-8c7e26ed742fdea7",
     "locked": true,
     "schema_version": 3,
     "solution": false,
     "task": false
    }
   },
   "outputs": [],
   "source": [
    "# Here are several tests that have been created for you.\n",
    "# Remeber that the question asks you to provide several more,\n",
    "# as well as justify them.\n",
    "\n",
    "# This is Namárië, JRRT's elvish poem written in Quenya\n",
    "wordbank = \"Ai! laurië lantar lassi súrinen, yéni unótimë ve rámar aldaron! Yéni ve lintë yuldar avánier mi oromardi lisse-miruvóreva Andúnë pella, Vardo tellumar nu luini yassen tintilar i eleni ómaryo airetári-lírinen. Sí man i yulma nin enquantuva? An sí Tintallë Varda Oiolossëo ve fanyar máryat Elentári ortanë, ar ilyë tier undulávë lumbulë; ar sindanóriello caita mornië i falmalinnar imbë met, ar hísië untúpa Calaciryo míri oialë. Sí vanwa ná, Rómello vanwa, Valimar! Namárië! Nai hiruvalyë Valimar. Nai elyë hiruva. Namárië!\".replace(\"!\", \"\").replace(\"?\", \"\").replace(\".\", \"\").replace(\",\", \"\").replace(\";\", \"\").split()\n",
    "\n",
    "trie = Trie_Q1(wordbank)\n",
    "assert trie.lookup('oiolossëo') == True  # be careful about capital letters!\n",
    "assert trie.lookup('an') == True  # this is a prefix, but also a word in itself\n",
    "assert trie.lookup('ele') == False  # this is a prefix, but NOT a word\n",
    "assert trie.lookup('Mithrandir') == False  # not in the wordbank lis"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 349,
   "metadata": {
    "nbgrader": {
     "grade": true,
     "grade_id": "cell-5bf2526fdd4f6dbb",
     "locked": false,
     "points": 0,
     "schema_version": 3,
     "solution": true,
     "task": false
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "True\n",
      "True\n",
      "False\n"
     ]
    }
   ],
   "source": [
    "wordbank2 = \"میرا نام عبدرحمن ہے\".replace(\"!\", \"\").replace(\"?\", \"\").replace(\".\", \"\").replace(\",\", \"\").replace(\";\", \"\").split()\n",
    "trie2 = Trie_Q1(wordbank2)\n",
    "print(trie2.lookup(\"عبدرحمن\"))  # searching for my name in my native language\n",
    "\n",
    "#inserting my soccer jersey number into the trie\n",
    "trie2.insert(\"07\")\n",
    "print(trie2.lookup(\"07\"))\n",
    "\n",
    "\n",
    "#an edge case where the trie may be empty\n",
    "trie3 = Trie_Q1(\"\")\n",
    "print(trie3.lookup(\"07\"))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "nbgrader": {
     "grade": true,
     "grade_id": "cell-e100769456a0b431",
     "locked": false,
     "points": 0,
     "schema_version": 3,
     "solution": true,
     "task": false
    }
   },
   "source": [
    "I have used three test cases. The first test case is using my native language urdu in which i have simply translated : My name is Abdurrehman. When I insert it into the trie and look it up, it runs completely fine and shows that my trie is applicable to other languages as well. Not only does it capture the correct letters, but it also captures the right word.\n",
    "\n",
    "The second test was just how my trie would respond to a number string. This also passed.\n",
    "\n",
    "The final test was creating an empty trie and searching it. It should have returned false and it did since it had nothing inside it."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "nbgrader": {
     "grade": false,
     "grade_id": "cell-fef57ab83eed68f2",
     "locked": true,
     "schema_version": 3,
     "solution": false,
     "task": false
    }
   },
   "source": [
    "## Q2: The computational complexity of tries [#ComplexityAnalysis, #DataStructures]\n",
    "\n",
    "Evaluate the **computational complexity of the insert() and lookup()** methods in a trie. What are the relevant variables for runtime? You might want to consider how the height of a trie is computed to start addressing this question.  Make sure to clearly explain your reasoning.\n",
    "\n",
    "**Compare your results to** the runtime of the same operations on **a BST**. Can you think of specific circumstances where the practical runtimes of operations supported by tries are higher than for BSTs? Explain your answer. If you believe such circumstances could be common, why would someone even bother implementing a trie tree?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 350,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0,0.5,'Average time for insert')"
      ]
     },
     "execution_count": 350,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "import time\n",
    "\n",
    "time1 = []\n",
    "time2 = []\n",
    "trie12 = Trie_Q1(\"\")\n",
    "for i in range(1,500):\n",
    "    \n",
    "    total1 = 0\n",
    "    total2 = 0\n",
    "    for j in range(500):\n",
    "        \n",
    "        start = time.time()\n",
    "        trie12.insert(\"insert\")\n",
    "        end = time.time()\n",
    "        \n",
    "        start1 = time.time()\n",
    "        trie12.lookup(\"insert\")\n",
    "        end1 = time.time()\n",
    "    \n",
    "        total1 += (end - start)\n",
    "        total2 += (end1 - start1)\n",
    "\n",
    "    time1.append(total1/500)\n",
    "    time2.append(total2/500)\n",
    "    \n",
    "    \n",
    "x = list(range(1,500))\n",
    "plt.plot(x,time1)\n",
    "plt.ylabel(\"Average time for insert\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 351,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0,0.5,'Average time for search')"
      ]
     },
     "execution_count": 351,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "y = list(range(1,500))\n",
    "plt.plot(y,time2)\n",
    "plt.ylabel(\"Average time for search\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "nbgrader": {
     "grade": true,
     "grade_id": "cell-df9c5720e271a448",
     "locked": false,
     "points": 0,
     "schema_version": 3,
     "solution": true,
     "task": false
    }
   },
   "source": [
    "A trie is a very useful tool because it appears to take the shape and characteristics of a tree, but behaves differently from the regular trees we have studied - AVL, BST and RBT's. One of the defining differences is that Trie's are not binary in nature, and do not follow the basic principles of BSTs. The concept of balance, binary-splits and most importantly how the parent-children relationships are set up are different which is key to the way Trie's operate.\n",
    "\n",
    "There are some things to keep in mind: Tries can be implemented in numerous ways and the foundation of these ways define the nuanced differences in time and space complexities. Another thing to note is that I am considering tries taking in words and letters as keys and each node is defined as a single character. Tries can also take on integers and other forms of input, which I am not considering.\n",
    "\n",
    "\n",
    "## Insert\n",
    "First and foremost, Tries are created based on the order of key insertion. So, no matter what the word, each character of it will be inserted one after the other. This is different from the creation of BSTs based on left child smaller, right child bigger than parent. According to this principle, the insertion would take O(M) time where M is the length of the word or total characters in it. The worst-case complexity therefore is big O(M). Compare this to the insertion complexity of BSTs and on average they take O(logn) for a single key. This is based on the fact that BSTs runtimes are directly related to their heights, and on average BSTs have logn height. However, in edge cases if there is a linked list, the insertion runtime can be as bad as O(n). For n insertions this mean O(nlogn) averagely and O(n^2) in worst case.\n",
    "\n",
    "## Search\n",
    "The search operation will follow the same principle as insert. Again, the Trie will take O(M) time to search or lookup a particular node or character. If it is looking up a word or a prefix, it will take O(M) time to travel through the subsequent nodes and verify it exists. Since this continuous nature will exist in every trie, there will be no redundant verifications happening. For example, imagine a trie has three branches: apple, appraisal and application. The trie will have the same first 3 nodes a-p-p, and then it will split. If we are looking up something like 'april', it will verify first 2 nodes and as it reaches the 3rd it will note that it doesn't exist and the search will finish. On the other hand, searching for 'applicat' will require us to go through each node and verify that this prefix exists. BSTs have a search complexity proportional to their height as well. Thus, search complexity on average is (logn) and n searches takes O(nlogn) time. In the worst case i.e a linked list, the search complexity would be O(n) and O(n^2) for n searches.\n",
    "\n",
    "\n",
    "As both graphs above show, the time taken for both operations is pretty similar at whichever level of input we are trying to loko at. This further reemphasizes our point of how the time complexity of insert and search is the same in tries.\n",
    "\n",
    "## Advantages of Trie\n",
    "Tries can be beneficial for a number of reasons. Their insert and search functions are always constant. This is a big plus to programmers because they do not need to worry about what might happen due to an input. Ofcourse, they are still interested in ensuring that the tries are not out of control and the inputs are as efficient as possible,but this time complexity gives much greater freedom in trying out varying inputs. The second benefit is the alphabetical sorting which is possible in a trie. We can alphabetically sort our tries due to the way they are structured.There can be a total of 26 first children (a,...,z), and each child node can have 26 possible further children. A recursive call to traverse through the trie in alphabetical order can create this ordered output. Lastly, tries have the possibility of creating methods based on prefixes. A trie is often called a prefix tree and thus we may want to search for all the words with a specific prefix, or exclude words with a prefix or even create an autcomplete (as we do later on). All of these are things which are possible in an efficient way using tries.\n",
    "\n",
    "\n",
    "## Problems of Trie\n",
    "I have mentioned many benefits in terms of runtime and usage of tries that may make tries seem like the perfect data structure. But all these benefits do not come without a cost. And the biggest cost of tries is the space complexity. Tries do not have any balancing features nor any other characteristics that can result in controlling their growth. Thus tries can take space of O(N* M) where N is the number of keys and M is the length of keys. A further complication can arise when the possible character set is changed (a new language perhaps). This multiplies into the space complexity. All of this excess storage means that for very large tries, the computations are not as efficient as compared to other data structures such as BSTs or even hash tables. \n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "nbgrader": {
     "grade": false,
     "grade_id": "cell-88f9b7ffcb16b429",
     "locked": true,
     "schema_version": 3,
     "solution": false,
     "task": false
    }
   },
   "source": [
    "## Q3: Print a dictionary in alphabetical order. [#PythonProgramming, #CodeReadability]\n",
    "\n",
    "Recall the meaning of pre-order traversal from your previous classes. On the data structure of a trie tree, pre-order traversal corresponds to an alphabetically sorted list of the words contained within (provided that your node children are sorted alphabetically). Copy your existing code to the code skeleton cell below, and add a new method to it, **preorder_traversal()**. This will be version two of your autocomplete script.\n",
    "\n",
    "The method should **return a list**, whose elements will be the words contained in the tree, in alphabetical order. On top of passing the provided test, write at least **three more tests**, and explain why they are appropriate.\n",
    "\n",
    "**Approach choice:** Remember the two possible approaches to the problem, as we’ve seen at the start of the course: iterative or recursive. Depending on your trie implementation, one might be preferred over the other. **Justify your choice of approach** in a few sentences (~100 words).\n",
    "\n",
    "Copy-paste your previous code and make adjustments to this \"new version\", so that you cannot break the old one :). The first cell has been locked to stop you from accidentally deleting the docstrings. Please code below.\n",
    "\n",
    "*(Hint: If you choose a recursive approach, it might be useful to implement a helper method that is not called by the user but by preorder_traversal().)*"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 352,
   "metadata": {
    "nbgrader": {
     "grade": false,
     "grade_id": "cell-e14ef592336544e8",
     "locked": true,
     "schema_version": 3,
     "solution": false,
     "task": false
    }
   },
   "outputs": [],
   "source": [
    "class Node_Q3:\n",
    "    # ...\n",
    "    def __init__(self, char):\n",
    "        self.char = char # each character of the node\n",
    "        \n",
    "        self.isWord = False #the flag we will use to check whether a word has been completed or not\n",
    "        \n",
    "        self.children = [] #we start empty but we will add items to this to maintain continuity and completion of words\n",
    "        \n",
    "class Trie_Q3:\n",
    "    def __init__(self, word_list = None):\n",
    "        \"\"\"Creates the Trie instance, inserts initial words if provided.\n",
    "        \n",
    "        Parameters\n",
    "        ----------\n",
    "        word_list : list\n",
    "            List of strings to be inserted into the trie upon creation.\n",
    "        \"\"\"\n",
    "        # initialize root node of the tree and set it to a blank char\n",
    "        self.root = Node_Q1('') \n",
    "        \n",
    "        # insert words to the trie from assigned word list\n",
    "        for word in word_list:\n",
    "            self.insert(word)\n",
    "    \n",
    "            \n",
    "            \n",
    "    \n",
    "    def insert(self, word):\n",
    "        \"\"\"Inserts a word into the trie, creating missing nodes on the go.\n",
    "        \n",
    "        Parameters\n",
    "        ----------\n",
    "        word : str\n",
    "            The word to be inserted into the trie.\n",
    "        \"\"\"\n",
    "        #begin at the root of the tree\n",
    "        start = self.root\n",
    "        \n",
    "        #assign index to items for later referencing\n",
    "        for i, char in enumerate(word):\n",
    "            \n",
    "            #comparator flag\n",
    "            finished = False\n",
    "            for node in start.children:\n",
    "                #lowercase so any type of input is accepted\n",
    "                if char.lower() == node.char:\n",
    "                    #move onto child\n",
    "                    start = node\n",
    "                    #the entire word is inserted and we finish the call\n",
    "                    finished = True\n",
    "                    break\n",
    "                    \n",
    "            # the insert function will vary here to support our aux function later on\n",
    "            # finished : is the char in the start's children node\n",
    "            # if char is not, we have new word and add it\n",
    "            if not finished:\n",
    "                new_node = Node_Q1(char.lower()) \n",
    "                start.children.append(new_node) \n",
    "                \n",
    "                ## since we have to have the list traversed in alphabetical order,\n",
    "                #  we must insert them and sort them in alphabetical order\n",
    "                start.children.sort(key=lambda x: x.char)\n",
    "                start = new_node\n",
    "            if i == len(word)-1:\n",
    "                start.isWord = True\n",
    "                  \n",
    "        \n",
    "    def lookup(self, word):\n",
    "        \"\"\"Determines whether a given word is present in the trie.\n",
    "        \n",
    "        Parameters\n",
    "        ----------\n",
    "        word : str\n",
    "            The word to be looked-up in the trie.\n",
    "            \n",
    "        Returns\n",
    "        -------\n",
    "        bool\n",
    "            True if the word is present in trie; False otherwise.\n",
    "            \n",
    "        Notes\n",
    "        -----\n",
    "        Your trie should ignore whether a word is capitalized.\n",
    "        E.g. trie.insert('Prague') should lead to trie.lookup('prague') = True\n",
    "        \"\"\"\n",
    "        #similar principle as insert, we start at the root\n",
    "        start = self.root\n",
    "        for i, char in enumerate(word):           \n",
    "            finished = False\n",
    "            for node in start.children:                  \n",
    "                if char.lower() == node.char:\n",
    "                    start = node\n",
    "                    finished = True\n",
    "                    break\n",
    "                \n",
    "            # this is where the code differs, instead of adding new nodes if the word is not present,\n",
    "            # we just return false because that is the function of this code.\n",
    "            if not finished: \n",
    "                return False\n",
    "        \n",
    "            # once the entire word has been found, the flag is changed and we can return True\n",
    "            if i == len(word) - 1:\n",
    "                return start.isWord\n",
    "    \n",
    "    \n",
    "    def preorder_traversal(self):\n",
    "        \"\"\"Delivers the content of the trie in alphabetical order.\n",
    "\n",
    "        The method should both print the words out and return them in a list.\n",
    "        You can create other methods if it helps you,\n",
    "        but the tests should use this one.\n",
    "          \n",
    "        Returns\n",
    "        ----------\n",
    "        list\n",
    "            List of strings, all words from the trie in alphabetical order.\n",
    "        \"\"\"\n",
    "        # create empty list for auxiliary function to traverse into\n",
    "        traversed = []\n",
    "        # call our helper func\n",
    "        self.aux_function(self.root, \"\", traversed)\n",
    "        return traversed\n",
    "    \n",
    "    # Since we are usiung a recursive approach, the hint stated an auxiliary function\n",
    "    # may be useful\n",
    "    # we use node as the root, word as the current word, and search is our traversed words\n",
    "    # I used a depth first search approach\n",
    "    def aux_function(self, node, word, search):\n",
    "        \n",
    "        #traverse through leaves\n",
    "        if not node.children:\n",
    "            search.append(word + node.char)\n",
    "            \n",
    "        # add new characters to the prefixes    \n",
    "        else:\n",
    "            word += node.char\n",
    "            if node.isWord:\n",
    "                search.append(word)\n",
    "            \n",
    "            #moving lower down the branch\n",
    "            for child_node in node.children:\n",
    "                #recursive call to continue searching\n",
    "                self.aux_function(child_node, word, search)\n",
    "            # take the word except last letter    \n",
    "            word = word[:-1]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 353,
   "metadata": {
    "nbgrader": {
     "grade": true,
     "grade_id": "cell-da1a00263d7d154b",
     "locked": false,
     "points": 0,
     "schema_version": 3,
     "solution": true,
     "task": false
    }
   },
   "outputs": [],
   "source": [
    "# YOUR CODE HERE"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 354,
   "metadata": {
    "nbgrader": {
     "grade": false,
     "grade_id": "cell-d7c1f4c7ff2248a5",
     "locked": true,
     "schema_version": 3,
     "solution": false,
     "task": false
    }
   },
   "outputs": [],
   "source": [
    "wordbank = \"Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Duis pulvinar. Class aptent taciti sociosqu ad litora torquent per conubia nostra, per inceptos hymenaeos. Nunc dapibus tortor vel mi dapibus sollicitudin. Etiam quis quam. Curabitur ligula sapien, pulvinar a vestibulum quis, facilisis vel sapien.\".replace(\",\", \"\").replace(\".\", \"\").split()\n",
    "\n",
    "trie = Trie_Q3(wordbank)\n",
    "assert trie.preorder_traversal() == ['a','ad','adipiscing','amet','aptent','class','consectetuer','conubia','curabitur','dapibus','dolor','duis','elit','etiam','facilisis','hymenaeos','inceptos','ipsum','ligula','litora','lorem','mi','nostra','nunc','per','pulvinar','quam','quis','sapien','sit','sociosqu','sollicitudin','taciti','torquent','tortor','vel','vestibulum']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 355,
   "metadata": {
    "nbgrader": {
     "grade": true,
     "grade_id": "cell-7d2cb3ead49482a1",
     "locked": false,
     "points": 0,
     "schema_version": 3,
     "solution": true,
     "task": false
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "['عبدرحمن', 'میرا', 'نام', 'ہے']\n",
      "['/', '10', '8', 'and', 'as', 'can', 'if', 'lets', 'like', 'manny7', 'mixtures', 'numbers', 'see', 'such', 'the', 'trie', 'with', 'work']\n",
      "[':', 'are', 'dealt', 'how', 'multiple', 'repeat', 'testing', 'with', 'words']\n"
     ]
    }
   ],
   "source": [
    "wordbank3 = \"میرا نام عبدرحمن ہے\".replace(\"!\", \"\").replace(\"?\", \"\").replace(\".\", \"\").replace(\",\", \"\").replace(\";\", \"\").split()\n",
    "trie3 = Trie_Q3(wordbank3)\n",
    "print(trie3.preorder_traversal()) # Surprisingly, the Trie successfully alphabetically arranges in other languages too\n",
    "\n",
    "wordbank4 = '/ lets see if the trie can work with numbers such as 10 and 8 and mixtures like manny7'.split()\n",
    "trie4 = Trie_Q3(wordbank4)\n",
    "print(trie4.preorder_traversal())\n",
    "\n",
    "wordbank5 = 'Testing how multiple words are dealt with : repeat repeat repeat'.split()\n",
    "trie5 = Trie_Q3(wordbank5)\n",
    "print(trie5.preorder_traversal())"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "nbgrader": {
     "grade": true,
     "grade_id": "cell-51cd58cc5c843d84",
     "locked": false,
     "points": 0,
     "schema_version": 3,
     "solution": true,
     "task": false
    }
   },
   "source": [
    "Since I am using using an auxiliary function, I mainly decided to use a recursive approach. The reason for this choice was two fold. It provided more flexibility working with this question, and it would also be useful later on. I implemented a depth first search for my aux function which meant that later on this could be used as a traverser. Right now, it made things simpler as the trie would be created in a way that a parent could have any number of children and their depths would vary. Therefore, the aux function helped capture entire words. \n",
    "\n",
    "The tests are appropriate because I wanted to see how the traversal would look like for different languages, numbers and special characters. The separate language was something I was not confident about, but surprisingly it also did it correctly (to verify please read from right to left because that is how the urdu language works). The numbers were reversed which is the way the function was designed and the special characters came absolutely first - something I had no knowledge or expectations of.\n",
    "\n",
    "There is another way I figured out to solve the function!! It was sneaky but it worked for these asserts however it would not work later on and be very complicated to navigate. The way was to just the keys in the word bank. Since I know that the word bank was standard words, just sorting them would arrange them alphabetically without any traversal required. Sneaky - but the incorrect approach.\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "nbgrader": {
     "grade": false,
     "grade_id": "cell-49d7083065cc304d",
     "locked": true,
     "schema_version": 3,
     "solution": false,
     "task": false
    }
   },
   "source": [
    "## Q4: Find the k most common words in a speech. [#PythonProgramming, #CodeReadability]\n",
    "\n",
    "To mathematically determine the overall connotation of a speech, you might want to compute which words are most frequently used and then run a [sentiment analysis](https://en.wikipedia.org/wiki/Sentiment_analysis). To this end, add a method to your code, **k_most_common()** that will take as an input k, an integer, and return a list of the k most common words from the dictionary within the trie. The structure of the output list should be such that each entry is a tuple, the first element being the word and the second an integer of its frequency (see docstring if you’re confused).\n",
    "\n",
    "To complete this exercise, you don’t have to bother with resolving ties (for example, if k = 1, but there are two most common words with the same frequency, you can return either of them), but consider it an extra challenge and let us know if you believe you managed to solve it.\n",
    "\n",
    "The test cell below downloads and preprocesses several real-world speeches, and then runs the k-most-common word analysis of them; your code should pass the tests. As usual, add at least **three more tests**, and justify why they are relevant to your code (feel free to find more speeches to start analysing too!).\n",
    "\n",
    "Again, copy-paste your previous code and make adjustments to this \"new version\". The first cell has been locked to stop you from accidentally deleting the docstrings.\n",
    "\n",
    "Completing this question well will help you to tackle Q5!\n",
    "\n",
    "*(Hint: This task will probably require your nodes to store more information about the frequency of words inserted into the tree. One data structure that might be very useful to tackle the problem of traversing the tree and finding most common words is heaps — you are allowed to use the heapq library or another alternative for this task.)*"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 356,
   "metadata": {
    "nbgrader": {
     "grade": false,
     "grade_id": "cell-3ba62778274b664d",
     "locked": true,
     "schema_version": 3,
     "solution": false,
     "task": false
    }
   },
   "outputs": [
    {
     "ename": "IndentationError",
     "evalue": "expected an indented block (<ipython-input-356-f3268391fb6a>, line 4)",
     "output_type": "error",
     "traceback": [
      "\u001b[0;36m  File \u001b[0;32m\"<ipython-input-356-f3268391fb6a>\"\u001b[0;36m, line \u001b[0;32m4\u001b[0m\n\u001b[0;31m    class Trie_Q4:\u001b[0m\n\u001b[0m        ^\u001b[0m\n\u001b[0;31mIndentationError\u001b[0m\u001b[0;31m:\u001b[0m expected an indented block\n"
     ]
    }
   ],
   "source": [
    "class Node_Q4:\n",
    "    # There might have to be some additions here.\n",
    "        \n",
    "class Trie_Q4:\n",
    "    # ...\n",
    "     \n",
    "    \n",
    "    def k_most_common(self, k):\n",
    "        \"\"\"Finds k words inserted into the trie most often.\n",
    "\n",
    "        You will have to tweak some properties of your existing code,\n",
    "        so that it captures information about repeated insertion.\n",
    "\n",
    "        Parameters\n",
    "        ----------\n",
    "        k : int\n",
    "            Number of most common words to be returned.\n",
    "\n",
    "        Returns\n",
    "        ----------\n",
    "        list\n",
    "            List of tuples.\n",
    "            \n",
    "            Each tuple entry consists of the word and its frequency.\n",
    "            The entries are sorted by frequency.\n",
    "\n",
    "        Example\n",
    "        -------\n",
    "        >>> print(trie.k_most_common(3))\n",
    "        [(‘the’, 154), (‘a’, 122), (‘i’, 122)]\n",
    "        \n",
    "        This means that the word ‘the’ has appeared 154 times in the inserted text.\n",
    "        The second and third most common words both appeared 122 times.\n",
    "        \"\"\"\n",
    "        "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 357,
   "metadata": {
    "nbgrader": {
     "grade": true,
     "grade_id": "cell-56d34e4f784db98d",
     "locked": false,
     "points": 0,
     "schema_version": 3,
     "solution": true,
     "task": false
    }
   },
   "outputs": [],
   "source": [
    "class Node_Q4:\n",
    "    \n",
    "    \n",
    "    # frequentist approach, therefore, we have to add a count\n",
    "    def __init__(self, char):\n",
    "        self.char = char # each character of the node\n",
    "        \n",
    "        self.isWord = False #the flag we will use to check whether a word has been completed or not\n",
    "        \n",
    "        self.children = [] #we start empty but we will add items to this to maintain continuity and completion of words\n",
    "        \n",
    "        self.count = 0  # counter\n",
    "    \n",
    "        \n",
    "class Trie_Q4:\n",
    "    # ...\n",
    "    def __init__(self, word_list = None):\n",
    "        \"\"\"Creates the Trie instance, inserts initial words if provided.\n",
    "        \n",
    "        Parameters\n",
    "        ----------\n",
    "        word_list : list\n",
    "            List of strifffngs to be inserted into the trie upon creation.\n",
    "        \"\"\"\n",
    "        # We have to specify the case to run when the word_list is not None to avoid iteration error\n",
    "        self.root = Node_Q4(\"\") \n",
    "        \n",
    "        if word_list is not None:\n",
    "            for word in word_list:\n",
    "                self.insert(word)\n",
    "                \n",
    "                \n",
    "    def insert(self, word):\n",
    "        \"\"\"Inserts a word into the trie, creating missing nodes on the go.\n",
    "        \n",
    "        Parameters\n",
    "        ----------\n",
    "        word : str\n",
    "            The word to be inserted into the trie.\n",
    "        \"\"\"\n",
    "        \n",
    "        #begin at the root of the tree\n",
    "        start = self.root\n",
    "        \n",
    "        #assign index to items for later referencing\n",
    "        for i, char in enumerate(word):\n",
    "            \n",
    "            #comparator flag\n",
    "            finished = False\n",
    "            for node in start.children:\n",
    "                #lowercase so any type of input is accepted\n",
    "                if char.lower() == node.char:\n",
    "                    #move onto child\n",
    "                    start = node\n",
    "                    #the entire word is inserted and we finish the call\n",
    "                    finished = True\n",
    "                    break\n",
    "                    \n",
    "            # the insert function will vary here to support our aux function later on\n",
    "            # finished : is the char in the start's children node\n",
    "            # if char is not, we have new word and add it\n",
    "            if not finished:\n",
    "                new_node = Node_Q4(char.lower()) \n",
    "                start.children.append(new_node) \n",
    "                \n",
    "                ## since we have to have the list traversed in alphabetical order,\n",
    "                #  we must insert them and sort them in alphabetical order\n",
    "                start.children.sort(key=lambda x: x.char)\n",
    "                start = new_node\n",
    "            if i == len(word)-1:\n",
    "                start.isWord = True\n",
    "                # add one to the counter\n",
    "                start.count += 1\n",
    "                \n",
    "    def lookup(self, word):\n",
    "        \"\"\"Determines whether a given word is present in the trie.\n",
    "          \n",
    "          Parameters\n",
    "          ----------\n",
    "          word : str\n",
    "              The word to be looked-up in the trie.\n",
    "              \n",
    "          Returns\n",
    "          -------\n",
    "          bool\n",
    "              True if the word is present in trie; False otherwise.\n",
    "              \n",
    "          Notes\n",
    "          -----\n",
    "          Your trie should ignore whether a word is capitalized.\n",
    "          E.g. trie.insert('Prague') should lead to trie.lookup('prague') = True\n",
    "        \"\"\"\n",
    "        #similar principle as insert, we start at the root\n",
    "        start = self.root\n",
    "        for i, char in enumerate(word):           \n",
    "            finished = False\n",
    "            for node in start.children:                  \n",
    "                if char.lower() == node.char:\n",
    "                    start = node\n",
    "                    finished = True\n",
    "                    break\n",
    "                \n",
    "            # this is where the code differs, instead of adding new nodes if the word is not present,\n",
    "            # we just return false because that is the function of this code.\n",
    "            if not finished: \n",
    "                return False\n",
    "        \n",
    "            # once the entire word has been found, the flag is changed and we can return True\n",
    "            if i == len(word) - 1:\n",
    "                return start.isWord\n",
    "            \n",
    "    def aux_function(self, node, word, search): \n",
    "           \n",
    "        #traverse through leaves AND also append the counter for each word\n",
    "        if not node.children:\n",
    "            search.append((word + node.char, node.count))\n",
    "        \n",
    "        # add new characters to the prefixes\n",
    "        else:\n",
    "            word += node.char\n",
    "            if node.isWord:\n",
    "                   search.append((word, node.count))  #again, append the count as well\n",
    "            \n",
    "            #moving lower down the branch\n",
    "            for child_node in node.children:\n",
    "                #recursive call to continue searching\n",
    "                self.aux_function(child_node, word, search)\n",
    "            # take the word except last letter  \n",
    "            word = word[:-1]\n",
    "    \n",
    "    def preorder_traversal(self): #same as Q3\n",
    "        \"\"\"Delivers the content of the trie in alphabetical order.\n",
    "\n",
    "          The method should both print the words out and return them in a list.\n",
    "          You can create other methods if it helps you,\n",
    "          but the tests should use this one.\n",
    "          \n",
    "          Returns\n",
    "          ----------\n",
    "          list\n",
    "              List of strings, all words from the trie in alphabetical order.\n",
    "        \"\"\"\n",
    "        # create empty list for auxiliary function to traverse into\n",
    "        traversed = []\n",
    "        # call our helper func\n",
    "        self.aux_function(self.root, \"\", traversed)\n",
    "        return traversed\n",
    "        \n",
    "    def k_most_common(self, k):\n",
    "        \"\"\"Finds k words inserted into the trie most often.\n",
    "\n",
    "        You will have to tweak some properties of your existing code,\n",
    "        so that it captures information about repeated insertion.\n",
    "\n",
    "        Parameters\n",
    "        ----------\n",
    "        k : int\n",
    "            Number of most common words to be returned.\n",
    "\n",
    "        Returns\n",
    "        ----------\n",
    "        list\n",
    "            List of tuples.\n",
    "            \n",
    "            Each tuple entry consists of the word and its frequency.\n",
    "            The entries are sorted by frequency.\n",
    "\n",
    "        Example\n",
    "        -------\n",
    "        >>> print(trie.k_most_common(3))\n",
    "        [(‘the’, 154), (‘a’, 122), (‘i’, 122)]\n",
    "        \n",
    "        This means that the word ‘the’ has appeared 154 times in the inserted text.\n",
    "        The second and third most common words both appeared 122 times.\n",
    "        \"\"\"\n",
    "        # we sort the traversed words and we reverse it to get maximum frequency first\n",
    "        # we also have to return frequency of the word\n",
    "        return sorted(self.preorder_traversal(),key=lambda x: x[1], reverse=True)[:k]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 359,
   "metadata": {
    "nbgrader": {
     "grade": false,
     "grade_id": "cell-e2bb42c8704e692b",
     "locked": true,
     "schema_version": 3,
     "solution": false,
     "task": false
    }
   },
   "outputs": [],
   "source": [
    "# Mehreen Faruqi - Black Lives Matter in Australia: https://bit.ly/CS110-Faruqi\n",
    "# John F. Kennedy - The decision to go to the Moon: https://bit.ly/CS110-Kennedy\n",
    "# Martin Luther King Jr. - I have a dream: https://bit.ly/CS110-King\n",
    "# Greta Thunberg - UN Climate Summit message: https://bit.ly/CS110-Thunberg\n",
    "# Vaclav Havel - Address to US Congress after the fall of Soviet Union: https://bit.ly/CS110-Havel\n",
    "\n",
    "# you might have to pip install urllib before running this cell\n",
    "# since you're downloading data from online, this might take a while to run\n",
    "import urllib.request\n",
    "speakers = ['Faruqi', 'Kennedy', 'King', 'Thunberg', 'Havel']\n",
    "#bad_chars = [';', ',', '.', '?', '!', '_', '[', ']', ':', '\"', '\"', '\"', '-', '-', ]\n",
    "bad_chars = [';', ',', '.', '?', '!', '_', '[', ']', ':', '“', '”', '\"', '-', '-']\n",
    "\n",
    "for speaker in speakers:\n",
    "    speech = urllib.request.urlopen(f'https://bit.ly/CS110-{speaker}')\n",
    "    \n",
    "    trie = Trie_Q4()\n",
    "\n",
    "    for line in speech:\n",
    "        line = line.decode(encoding = 'utf-8')\n",
    "        line = filter(lambda i: i not in bad_chars, line)\n",
    "        words = \"\".join(line).split()\n",
    "        for word in words:\n",
    "            trie.insert(word)\n",
    " \n",
    "    if speaker == 'Faruqi':\n",
    "        assert trie.k_most_common(20) == [('the', 60), ('and', 45), ('to', 39), ('in', 37), ('of', 34), ('is', 25), ('that', 22), ('this', 21), ('a', 20), ('people', 20), ('has', 14), ('are', 13), ('for', 13), ('we', 13), ('have', 12), ('racism', 12), ('black', 11), ('justice', 9), ('lives', 9), ('police', 9)]\n",
    "    elif speaker == 'Kennedy':\n",
    "        assert trie.k_most_common(21) == [('the', 117), ('and', 109), ('of', 93), ('to', 63), ('this', 44), ('in', 43), ('we', 43), ('a', 39), ('be', 30), ('for', 27), ('that', 27), ('as', 26), ('it', 24), ('will', 24), ('new', 22), ('space', 22), ('is', 21), ('all', 15), ('are', 15), ('have', 15), ('our', 15)]\n",
    "    elif speaker == 'Havel':\n",
    "        assert trie.k_most_common(22) == [('the', 34), ('of', 23), ('and', 20), ('to', 15), ('in', 13), ('a', 12), ('that', 12), ('are', 9), ('we', 9), ('have', 8), ('human', 8), ('is', 8), ('you', 8), ('as', 7), ('for', 7), ('has', 7), ('this', 7), ('be', 6), ('it', 6), ('my', 6), ('our', 6), ('world', 6)]\n",
    "    elif speaker == 'King':\n",
    "        assert trie.k_most_common(23) == [('the', 103), ('of', 99), ('to', 59), ('and', 54), ('a', 37), ('be', 33), ('we', 29), ('will', 27), ('that', 24), ('is', 23), ('in', 22), ('as', 20), ('freedom', 20), ('this', 20), ('from', 18), ('have', 17), ('our', 17), ('with', 16), ('i', 15), ('let', 13), ('negro', 13), ('not', 13), ('one', 13)]\n",
    "    elif speaker == 'Thunberg':\n",
    "        assert trie.k_most_common(24) == [('you', 22), ('the', 20), ('and', 16), ('of', 15), ('to', 14), ('are', 10), ('is', 9), ('that', 9), ('be', 8), ('not', 7), ('with', 7), ('i', 6), ('in', 6), ('us', 6), ('a', 5), ('how', 5), ('on', 5), ('we', 5), ('all', 4), ('dare', 4), ('here', 4), ('my', 4), ('people', 4), ('will', 4)]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 360,
   "metadata": {
    "nbgrader": {
     "grade": true,
     "grade_id": "cell-9e839be729e8377a",
     "locked": false,
     "points": 0,
     "schema_version": 3,
     "solution": true,
     "task": false
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[('repeat', 3)]\n",
      "[('عبدرہمان', 6)]\n",
      "[('', 0)]\n"
     ]
    }
   ],
   "source": [
    "wordbank6 = 'Testing how multiple words are dealt with : repeat repeat repeat'.split()\n",
    "trie6 = Trie_Q4(wordbank6)\n",
    "print(trie6.k_most_common(1))\n",
    "\n",
    "wordbank7 = \"عبدرہمان عبدرہمان عبدرہمان عبدرہمان عبدرہمان عبدرہمان\".split()\n",
    "trie7 = Trie_Q4(wordbank7)\n",
    "print(trie7.k_most_common(1))\n",
    "\n",
    "wordbank8 = [] #edge case\n",
    "trie8 = Trie_Q4(wordbank8)\n",
    "print(trie8.k_most_common(1))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "nbgrader": {
     "grade": true,
     "grade_id": "cell-e89770cfba54e3db",
     "locked": false,
     "points": 0,
     "schema_version": 3,
     "solution": true,
     "task": false
    }
   },
   "source": [
    "I knew that the tries worked with separate languages but I wanted to see if the counter would work the same way and split up the words appropriately rather than in a naive way (meaning just taking bits of strings together). It worked fine and outputted what I wanted. Repeated words were counted perfectly and in the edge case it showed that the trie was empty and there was no word with a frequency greater than 1."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "I was stumped by this question for a long time. I was split between using heaps or another approach. I think I was overcomplicating it by trying to perform a recursion on the k-common method itself rather than relying on a helper function. Another issue I kept having was \"nonetype is not iterable\" on my word list since there was an iteration over the speeches which were happening. I added a line for running init when wordlist was not none. Finally, I was confused as to when the counter should be called and how it should be incorporated. I am sure there is a way to include it within the k-common function itself, but I felt the auxiliary function keeping tabs of the words and counts would be a great help and the main method just reverse sorting these would be the simplest way to get this done."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "nbgrader": {
     "grade": false,
     "grade_id": "cell-6b0e8698889d44bd",
     "locked": true,
     "schema_version": 3,
     "solution": false,
     "task": false
    }
   },
   "source": [
    "## Q5: Implement an autocomplete with a Shakespearean dictionary! [#PythonProgramming, #CodeReadability]\n",
    "\n",
    "This is by itself the most difficult coding question of the assignment, but completing Q4 thoroughly should lay a lot of the groundwork for you already.\n",
    "\n",
    "Your task is to create a new **autocomplete()** method for your class, which will take a string as an input, and return another string as an output. If the string is not present in the tree, the output will be the same as the input. However, if the string is present in the tree, your task is to find the most common word to which it is a prefix and return that word instead (this can still turn out to be itself).\n",
    "\n",
    "To make the task more interesting, use the test cell code to download and parse “The Complete Works of William Shakespeare”, and insert them into a trie. Your autocomplete should then pass the following tests. As usual, add at least **three more test cases**, and explain why they are appropriate (you can use input other than Shakespeare for them).\n",
    "\n",
    "Make sure to include a minimum **100 word-summary critically evaluating** your autocomplete engine.\n",
    "\n",
    "*(Hint: Again, depending on how you choose to implement it, your autocomplete() might make calls to other helper methods. However, make sure that autocomplete() is the method exposed to the user in order to pass the tests.)*\n",
    "\n",
    "*This is a thoroughly frequentist approach to the problem, which is not the only method, and in many cases not the ideal method. However, if you were tasked with implementing something like [this](https://jqueryui.com/autocomplete/) or [this](https://xdsoft.net/jqplugins/autocomplete/), it might just be enough, so let’s give it a go. Good luck!*"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 181,
   "metadata": {
    "nbgrader": {
     "grade": false,
     "grade_id": "cell-6958b6236cc4bb0f",
     "locked": true,
     "schema_version": 3,
     "solution": false,
     "task": false
    }
   },
   "outputs": [],
   "source": [
    "class Node_Q5:\n",
    "    # ...\n",
    "        \n",
    "class Trie_Q5:\n",
    "    # ...\n",
    "    \n",
    "    \n",
    "    def autocomplete(self, prefix):\n",
    "        \"\"\"Finds the most common word with the given prefix.\n",
    "\n",
    "        You might want to reuse some functionality or ideas from Q4.\n",
    "\n",
    "        Parameters\n",
    "        ----------\n",
    "        prefix : str\n",
    "            The word part to be “autocompleted”.\n",
    "\n",
    "        Returns\n",
    "        ----------\n",
    "        str\n",
    "            The complete, most common word with the given prefix.\n",
    "            \n",
    "            The return value is equal to prefix if there is no valid word in the trie.\n",
    "            The return value is also equal to prefix if prefix is the most common word.\n",
    "        \"\"\"\n",
    "       "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 361,
   "metadata": {
    "nbgrader": {
     "grade": true,
     "grade_id": "cell-b43f928d7c5a7b51",
     "locked": false,
     "points": 0,
     "schema_version": 3,
     "solution": true,
     "task": false
    }
   },
   "outputs": [],
   "source": [
    "## for this code, I realized that most of my methods were not necessary since it was a thoroughly frequentist approach\n",
    "# therefore, I only kept the ones which would be required to get the naive autocomplete and got rid of the others\n",
    "# for more efficiency\n",
    "\n",
    "class Node_Q5:\n",
    "    # ...\n",
    "      def __init__(self, char):\n",
    "        self.char = char # each character of the node\n",
    "        \n",
    "        self.isWord = False #the flag we will use to check whether a word has been completed or not\n",
    "        \n",
    "        self.children = [] #we start empty but we will add items to this to maintain continuity and completion of words\n",
    "        \n",
    "        self.count = 0  # counter\n",
    "\n",
    "        \n",
    "class Trie_Q5:\n",
    "    \n",
    "    def __init__(self, word_list = None):\n",
    "        \"\"\"Creates the Trie instance, inserts initial words if provided.\n",
    "        \n",
    "        Parameters\n",
    "        ----------\n",
    "        word_list : list\n",
    "            List of strings to be inserted into the trie upon creation.\n",
    "        \"\"\"\n",
    "        self.root = Node_Q5(\"\") \n",
    "        \n",
    "        if word_list is not None:\n",
    "            for word in word_list:\n",
    "                self.insert(word)\n",
    "      \n",
    "    def insert(self, word): # same as Q4\n",
    "        \"\"\"Inserts a word into the trie, creating missing nodes on the go.\n",
    "        \n",
    "        Parameters\n",
    "        ----------\n",
    "        word : str\n",
    "            The word to be inserted into the trie.\n",
    "        \"\"\"\n",
    "        #begin at the root of the tree\n",
    "        start = self.root\n",
    "        \n",
    "        #assign index to items for later referencing\n",
    "        for i, char in enumerate(word):\n",
    "            \n",
    "            #comparator flag\n",
    "            finished = False\n",
    "            for node in start.children:\n",
    "                #lowercase so any type of input is accepted\n",
    "                if char.lower() == node.char:\n",
    "                    #move onto child\n",
    "                    start = node\n",
    "                    #the entire word is inserted and we finish the call\n",
    "                    finished = True\n",
    "                    break\n",
    "                    \n",
    "            # the insert function will vary here to support our aux function later on\n",
    "            # finished : is the char in the start's children node\n",
    "            # if char is not, we have new word and add it\n",
    "            if not finished:\n",
    "                new_node = Node_Q5(char.lower()) \n",
    "                start.children.append(new_node) \n",
    "                \n",
    "                ## since we have to have the list traversed in alphabetical order,\n",
    "                #  we must insert them and sort them in alphabetical order\n",
    "                start.children.sort(key=lambda x: x.char)\n",
    "                start = new_node\n",
    "            if i == len(word)-1:\n",
    "                start.isWord = True\n",
    "                # add one to the counter\n",
    "                start.count += 1\n",
    "\n",
    "    def lookup(self, word):\n",
    "        \"\"\"Determines whether a given word is present in the trie.\n",
    "          \n",
    "          Parameters\n",
    "          ----------\n",
    "          word : str\n",
    "              The word to be looked-up in the trie.\n",
    "              \n",
    "          Returns\n",
    "          -------\n",
    "          bool\n",
    "              True if the word is present in trie; False otherwise.\n",
    "              \n",
    "          Notes\n",
    "          -----\n",
    "          Your trie should ignore whether a word is capitalized.\n",
    "          E.g. trie.insert('Prague') should lead to trie.lookup('prague') = True\n",
    "        \"\"\"           \n",
    "        #similar principle as insert, we start at the root\n",
    "        start = self.root\n",
    "        for i, char in enumerate(word):           \n",
    "            finished = False\n",
    "            for node in start.children:                  \n",
    "                if char.lower() == node.char:\n",
    "                    start = node\n",
    "                    finished = True\n",
    "                    break\n",
    "                \n",
    "            # this is where the code differs, instead of adding new nodes if the word is not present,\n",
    "            # we just return false because that is the function of this code.\n",
    "            if not finished: \n",
    "                return False\n",
    "        \n",
    "            # once the entire word has been found, the flag is changed and we can return True\n",
    "            if i == len(word) - 1:\n",
    "                \n",
    "                ### instead of completing when the word is completed, we need to find\n",
    "                # the prefix which would suggest words so we return the node with last character\n",
    "                return start\n",
    "      \n",
    "    def aux_function(self, node, word, search):\n",
    "         \n",
    "        #traverse through leaves AND also append the counter for each word\n",
    "        if not node.children:\n",
    "            search.append((word + node.char, node.count))\n",
    "        \n",
    "        # add new characters to the prefixes\n",
    "        else:\n",
    "            word += node.char\n",
    "            if node.isWord:\n",
    "                   search.append((word, node.count))  #again, append the count as well\n",
    "            \n",
    "            #moving lower down the branch\n",
    "            for child_node in node.children:\n",
    "                #recursive call to continue searching\n",
    "                self.aux_function(child_node, word, search)\n",
    "            # take the word except last letter  \n",
    "            word = word[:-1]\n",
    "\n",
    "      \n",
    "    def autocomplete(self, prefix):\n",
    "        \"\"\"Finds the most common word with the given prefix.\n",
    "\n",
    "          You might want to reuse some functionality or ideas from Q4.\n",
    "\n",
    "          Parameters\n",
    "          ----------\n",
    "          prefix : str\n",
    "              The word part to be “autocompleted”.\n",
    "\n",
    "          Returns\n",
    "          ----------\n",
    "          str\n",
    "              The complete, most common word with the given prefix.\n",
    "              \n",
    "              The return value is equal to prefix if there is no valid word in the trie.\n",
    "              The return value is also equal to prefix if prefix is the most common word.\n",
    "        \"\"\"\n",
    "        # look up the prefix of which we will suggest the autocompletion\n",
    "        autocomplete_word = self.lookup(prefix)\n",
    "        \n",
    "        # if the prefix does not have a word, return it \n",
    "        if not autocomplete_word: \n",
    "            return prefix\n",
    "       \n",
    "        # create empty list to add all possible words to\n",
    "        possible_suggestions = []\n",
    "        # run auxiliary function to compile all the words that can be suggested\n",
    "        self.aux_function(autocomplete_word, copy(prefix[:-1]), possible_suggestions)\n",
    "      \n",
    "        #since we are using a frequentist approach, again we will suggest the word that has the highest frequency\n",
    "        suggestion = sorted(possible_suggestions,key=lambda x: x[1], reverse=True)\n",
    "        return suggestion[0][0]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 362,
   "metadata": {
    "nbgrader": {
     "grade": false,
     "grade_id": "cell-763fdf92d703d9f8",
     "locked": true,
     "schema_version": 3,
     "solution": false,
     "task": false
    }
   },
   "outputs": [],
   "source": [
    "import urllib.request\n",
    "response = urllib.request.urlopen('http://bit.ly/CS110-Shakespeare')\n",
    "bad_chars = [';', ',', '.', '?', '!', '1', '2', '3', '4', '5', '6', '7', '8', '9', '0', '_', '[', ']']\n",
    "\n",
    "trieSH = Trie_Q5()\n",
    "\n",
    "for line in response:\n",
    "    line = line.decode(encoding = 'utf-8')\n",
    "    line = filter(lambda i: i not in bad_chars, line)\n",
    "    words = \"\".join(line).split()\n",
    "    for word in words:\n",
    "        trieSH.insert(word)\n",
    "\n",
    "assert trieSH.autocomplete('hist') == 'history'\n",
    "assert trieSH.autocomplete('en') == 'enter'\n",
    "assert trieSH.autocomplete('cae') == 'caesar'\n",
    "assert trieSH.autocomplete('gen') == 'gentleman'\n",
    "assert trieSH.autocomplete('pen') == 'pen'\n",
    "assert trieSH.autocomplete('tho') == 'thou'\n",
    "assert trieSH.autocomplete('pent') == 'pentapolis'\n",
    "assert trieSH.autocomplete('petr') == 'petruchio'"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 363,
   "metadata": {
    "nbgrader": {
     "grade": true,
     "grade_id": "cell-e65110651f531630",
     "locked": false,
     "points": 0,
     "schema_version": 3,
     "solution": true,
     "task": false
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "myname\n",
      "Manchesterunited\n",
      "Liverpool\n",
      "عبدرحمن\n"
     ]
    }
   ],
   "source": [
    "wordbank9 = [] #edge case\n",
    "trie9 = Trie_Q5(wordbank9)\n",
    "print(trie9.autocomplete(\"myname\"))\n",
    "\n",
    "\n",
    "wordbank10 = (\"Manchester-United, Chelsea, Arsenal, Liverpool\").replace(\",\",\"\").replace(\"-\",\"\").split()\n",
    "trie10 = Trie_Q5(wordbank10)\n",
    "print(trie10.autocomplete(\"Manc\"))\n",
    "print(trie10.autocomplete(\"Live\"))\n",
    "\n",
    "\n",
    "wordbank11 = (\"میرا نام عبدرحمن ہے\").split()\n",
    "trie11 = Trie_Q5(wordbank11)\n",
    "print(trie11.autocomplete(\"عبد\"))\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "nbgrader": {
     "grade": true,
     "grade_id": "cell-f1fb8e081b7fcaf3",
     "locked": false,
     "points": 0,
     "schema_version": 3,
     "solution": true,
     "task": false
    }
   },
   "source": [
    "At first, I was completely lost with the autocomplete function and logic. But after attending OH, I realized that the strategy was to develop something that ran on the basis of a frequentist approach. Meaning that it would suggest the most common word according to the prefix given. Then, I developed the strategy of using my depth first search along with a counter. I also tried implementing a sort of heap here where the most frequently used word would be popped according to maxheap but I felt the code was becoming very complicated - although, I do admit that it would improve runtime efficiency. Finally, I called my auxiliary function to get a list of the common words according to the final node of the prefix (because that is where all the possible words would split) and then sorted them in reverse order to get highest frequency first. This was sort of recreating the K-common word function however instead of getting words by frequency I suggested the completion of a prefix based off of what the possible highest repeated word there was.\n",
    "\n",
    "In terms of the analysis of the algorithm itself - I would say it performs alright but there are definitely improvements that it needs. First of all, its a frequency-based inferential autocomplete. It requires some sort of comprehensive word bank and recommends autocompletions based on often-repeated words. As a search engine this may not be great as the suggestions may be constrained - however, an addition that could be made to this algorithm is that each time a user enters a search or a word, it gets appended to the original word bank. This way, the bot will become tailored to the specific users most frequently used words for example if this was an autcompleter in their phones and drew words from the users text messages. It could also pick up slang and informal words a user would often use so there is great potential for the program.\n",
    "\n",
    "\n",
    "The first test was an edge case where I wished to verify if an empty trie would just return the prefix we were trying to autocomplete and it did. The second case was a general one which I wanted to mimic what google searches do in a naive way (the frequentist approach haha). And lastly, I wanted to verify if prefixes in another language would work and they did! "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "HCS\n",
    "\n",
    "\n",
    "# #algorithms - I had to write down algorithm using pseudocode and the research that I did. By truly understanding the logic behind the solution, I deeply understood what the algorithm was, how it functioned, what its pros and cons were and was able to perform experiments using it. Drew on the trie and node creation in q1 to use oop and the appopriate methods and attributes to successfully solve the problem.\n",
    "\n",
    "\n",
    "# #plausibility - Performed plausibility checks using the tests space at each step of the questions. I knew that even if the asserts passed there could be edge cases or other ways my program might not be working as I wanted, and by performing these plausibility checks I discovered that my initial approach to preorder traversal was a shortcut that would make things difficult later on, so i managed to save myself from wasting time and immediately changed my approach and got to the correct solution.\n",
    "\n",
    "# #networks - This assignment was ALL about networks and connections between nodes. First, understanding tries and how the nodes in a trie could be connected, how the information was stored and searched for was the most integral part of completing this. After this, mapping the difference between a trie and a BST, how the trie root remains empty and how a parent can have multiple children showed that the network of data storage was perfectly suited for something like searching using prefix strings. This ultimately led to the logic behind the autocomplete and other potential uses of tries using prefixes.\n",
    "\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "celltoolbar": "Create Assignment",
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
